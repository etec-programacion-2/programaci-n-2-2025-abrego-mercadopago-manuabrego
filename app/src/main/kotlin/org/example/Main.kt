/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example
import org.example.database.DatabaseConnection
import org.example.database.DatabaseManager  
import org.example.database.DatabaseUtils

fun main() {
    println("üè¶ Iniciando Billetera Virtual")
    println("=" * 50)
    
    try {
        // Mostrar informaci√≥n de la conexi√≥n
        println("üîó ${DatabaseConnection.getConnectionInfo()}")
        println("üìä Estado de conexi√≥n: ${if (DatabaseConnection.isConnectionActive()) "Activa" else "Inactiva"}")
        
        // Verificar salud de la base de datos
        println("\nüè• Verificando salud de la base de datos...")
        val isHealthy = DatabaseUtils.checkDatabaseHealth()
        
        if (!isHealthy) {
            println("‚ùå La base de datos tiene problemas. Verifica que todas las tablas existan.")
            return
        }
        
        // Mostrar resumen detallado
        println()
        DatabaseUtils.showDatabaseSummary()
        
        // Insertar datos de prueba si no existen
        println("\nüß™ Verificando datos de prueba...")
        DatabaseUtils.insertTestData()
        
        // Ejemplo de uso del DatabaseManager
        println("\nüîç Ejemplos de uso del DatabaseManager:")
        demonstrateUsage()
        
        println("\nüéâ Sistema inicializado correctamente")
        
    } catch (e: Exception) {
        println("‚ùå Error iniciando el sistema: ${e.message}")
        e.printStackTrace()
    } finally {
        // Cerrar conexi√≥n al finalizar
        DatabaseConnection.closeConnection()
    }
}

/**
 * Funci√≥n para demostrar el uso del DatabaseManager
 */
private fun demonstrateUsage() {
    val dbManager = DatabaseManager()
    
    try {
        // Ejemplo 1: Contar usuarios
        val userCount = dbManager.countRecords("users")
        println("üë• Total de usuarios: $userCount")
        
        // Ejemplo 2: Verificar si existe un email espec√≠fico
        val emailExists = dbManager.exists("users", "email = ?", "juan@test.com")
        println("üìß ¬øExiste juan@test.com? ${if (emailExists) "S√≠" else "No"}")
        
        // Ejemplo 3: Obtener informaci√≥n de usuarios (solo si hay datos)
        if (userCount > 0) {
            println("\nüë§ Primeros usuarios registrados:")
            val resultSet = dbManager.executeQuery("SELECT full_name, email FROM users LIMIT 3")
            
            var count = 1
            while (resultSet.next()) {
                val name = resultSet.getString("full_name")
                val email = resultSet.getString("email")
                println("   $count. $name ($email)")
                count++
            }
            resultSet.close()
        }
        
        // Ejemplo 4: Contar transacciones por estado
        val completedTransactions = dbManager.countRecords("transactions", "status = ?", "COMPLETED")
        val pendingTransactions = dbManager.countRecords("transactions", "status = ?", "PENDING")
        
        println("\nüí∏ Transacciones:")
        println("   ‚úÖ Completadas: $completedTransactions")
        println("   ‚è≥ Pendientes: $pendingTransactions")
        
        // Ejemplo 5: Mostrar balance total del sistema
        showSystemBalance(dbManager)
        
    } catch (e: Exception) {
        println("‚ùå Error en demostraci√≥n: ${e.message}")
    }
}

/**
 * Funci√≥n para mostrar el balance total del sistema
 */
private fun showSystemBalance(dbManager: DatabaseManager) {
    try {
        val resultSet = dbManager.executeQuery("SELECT SUM(balance) as total FROM accounts")
        
        if (resultSet.next()) {
            val totalBalance = resultSet.getDouble("total")
            println("üí∞ Balance total del sistema: $totalBalance ARS")
        }
        resultSet.close()
        
    } catch (e: Exception) {
        println("‚ö†Ô∏è No se pudo calcular el balance total: ${e.message}")
    }
}

/**
 * Extensi√≥n para repetir strings (similar a Python)
 */
private operator fun String.times(n: Int): String = this.repeat(n)